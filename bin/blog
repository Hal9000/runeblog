#!/usr/bin/env ruby

# $LOAD_PATH << "./lib"

require 'global'
require 'rubytext'

require 'repl'

# trap("INT") { }

include RuneBlog::REPL

def get_argv
  return nil if ARGV.size == 0
  cmd = ARGV[0..1].join(" ")
  arg = ARGV[2]
  [cmd, arg]
end

def mainloop
  print fx("blog> ", Red)
  cmd = STDSCR.gets(history: @cmdhist)
  cmd_quit(nil) if cmd.nil?   # ^D
  cmd.chomp!
  return if cmd.empty?   # CR does nothing
  meth, params = RuneBlog::REPL.choose_method(cmd)
  old, str = send(meth, params)
  puts str if old && ! str.nil?
rescue => err
  puts err
end


###########

RubyText.start(:_echo, :keypad, scroll: true, log: "blogcmd.txt", fg: Blue, bg: White)

# STDOUT.sync = true

cmd, arg = get_argv

if ! RuneBlog.exist?
  print "No blog found. Create new one? (y/n) "
  resp = gets.chomp
  if resp == "y"
    RuneBlog.create_new_blog
  else
    exit
  end
end

@blog = RuneBlog.new

# STDSCR.clear if curses?

if cmd.nil?   # REPL
  puts fx("\n  RuneBlog", :bold), fx(" v #{RuneBlog::VERSION}\n", Red)
  @cmdhist = []
  loop { mainloop }
  sleep 0.2
  system("tput clear")
  puts
else  # one command
  file = File.open("/dev/tty")
  STDIN.reopen(file)    # avoid ARGF dumbness
  cmd = ARGV.join(" ")
  meth, params = RuneBlog::REPL.choose_method(cmd)
  str = send(meth, params)
  puts str unless str.nil?
  puts
end

