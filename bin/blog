#!/usr/bin/env ruby

# $LOAD_PATH << "./lib"

require 'runeblog'
require 'rubytext'

require 'repl'

include RuneBlog::REPL

def get_started
  puts
  puts fx(<<-TEXT, :bold)
  Blog repo successfully created.
  For help, type h or help.
  Create views with: new view
  Create a post (within current view): new post
TEXT
end

def mainloop
  info = @blog.view || "no view"
  print fx("[#{info}] ", Red, :bold)
  cmd = STDSCR.gets(history: @cmdhist, tab: @tabcom)
  cmd_quit(nil) if cmd.nil?   # ^D
  cmd.chomp!
  return if cmd.empty?   # CR does nothing
  meth, params = RuneBlog::REPL.choose_method(cmd)
  ret, str = send(meth, params)
rescue => err
  puts err
end

def cmdline_preview
  _need_view
  local = @blog.view.local_index
  result = system("open #{local}")
end

def cmdline_publish
  abort "Nor implemented yet"
  _need_view
end

def cmdline_browse
  abort "Nor implemented yet"
  _need_view
end

def _need_view
  @view = ARGV[1]
  abort "Need 'view' parameter" if @view.nil?
  abort "No such view '#{view}'" unless @blog.view?(@view)
end

def cmdline_rebuild
  _need_view
  puts "Generating view..."
  @blog.generate_view(@view)
  puts "Generating index..."
  @blog.generate_index(@view)
end

def handle_cmdline
  cmd = ARGV[0]
  @blog = RuneBlog.new
  abort "No blog found" if @blog.nil?

  case cmd
    when "rebuild"; cmdline_rebuild
    when "publish"; cmdline_publish
    when "preview"; cmdline_preview
    when "browse";  cmdline_browse
  else
    puts "Command '#{cmd}' is unknown"
  end
  exit
end

### Main

major, minor = RUBY_VERSION.split(".").values_at(0,1)
ver = major.to_i*10 + minor.to_i
abort "Need Ruby 2.4 or greater" unless ver >= 24

include RuneBlog::Helpers  # for try_read_config

handle_cmdline unless ARGV.empty?

errfile = File.new("stderr.out", "w")
STDERR.reopen(errfile)

# read a .rubytext file here?? Call it something else?
home = ENV['HOME']
@fg, @bg = try_read_config("#{home}/.rubytext", fg: Blue, bg: White)
@fg = @fg.downcase.to_sym
@bg = @bg.downcase.to_sym

RubyText.start(:_echo, :keypad, scroll: true, log: "binblog.txt", fg: @fg, bg: @bg)

if ! RuneBlog.exist?
  print fx("\n  No blog repo found. Create new one? (y/n): ", :bold)
  response = gets.chomp
  if response.downcase == "y"
    RuneBlog.create_new_blog_repo
    get_started
  else
    exit
  end
end

@blog = RuneBlog.new

puts fx("\n  RuneBlog", :bold), fx(" v #{RuneBlog::VERSION}\n", Red)

@cmdhist = []
@tabcom = RuneBlog::REPL::Patterns.keys.uniq - RuneBlog::REPL::Abbr.keys
@tabcom.map! {|x| x.sub(/ [\$\>].*/, "") + " " }
@tabcom.sort!
  
loop { mainloop }

system("tput clear")
sleep 0.2
puts

